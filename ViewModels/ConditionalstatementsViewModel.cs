using Cotting.Infrustructure.Commands;
using Cotting.ViewModels.Base;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;

namespace Cotting.ViewModels
{
    internal class ConditionalstatementsViewModel: ViewModel
    {
        #region Commands
        //_______________________________________________________________//

        private ICommand _radioCommand;

        public ICommand RadioCommand
        {
            get
            {
                if (_radioCommand == null)
                    _radioCommand = new RadioCommand((param) => { RadioMethod(param); });
                return _radioCommand;
            }
        }

        private void RadioMethod(object parametr)
        {
            string answer = (string)parametr;
        }
        //_______________________________________________________________//
        #endregion

        private string _Motivation = "Добрый день, к нам каждый день волонтеры привозят множество разных подушек для кошек, которые потом распределяются по приюту. Нам необходимо подобрать подушки семи кошкам: " +
            "\n-Марусе - нужна яркая и твердая подушка" +
            "\n-Рыжику - нужна мягкая, но не зеленая подушка" +
            "\n-Алисе - нужна подушка с натуральными наполнителями" +
            "\n-Мусе - нужна круглая или овальная подушка" +
            "\n-Соне - нужна декоративная подушка" +
            "\n-Васе - нужна дакимакура любая, но без изображения жирафов" +
            "\n-Кузе - нужна ортопедическая соломенная подушка\n" +
            "\nДля того чтобы выполнить это задание, вы узнаете:" +
            "\n1) Операции сравнения и логические операции" +
            "\n2) Как создавать условные конструкции" +
            "\n3) Как создавать сложные ветвления\n";

        public string Motivaton
        {
            get => _Motivation;
            set => Set(ref _Motivation, value);
        }

        private string _Text1 = "Кроме математических операций существуют и операции сравнения. Они в отличии от первых дают результат типа bool. " +
            "Чаще всего они используются в условных конструкциях, о которых мы поговорим далее. " +
            "Единственным отличием обозначений языка C# от “настоящего” является обозначение равенства. " +
            "Так как символ “равно” был занят для присваивания, для сравнения используется двойное равно.\n";

        public string Text1
        {
            get => _Text1;
            set => Set(ref _Text1, value);
        }

        private string _Text2 = "Для связи нескольких сравнений существуют логические операции, каждый из которых выполняется в своем отдельном случае. " +
            "Операция “Или” используется, если хотя бы одно из условий должно выполняться, " +
            "а операция “И” для того чтобы все условия выполнялись одновременно. " +
            "Двойные “ИЛИ” и “И” нужны, когда следующее условие дополнительное и важно,чтобы второе выполнялось или не выполнялось."+
            "“Не” используется для отрицания выражений типа bool.\n";

        public string Text2
        {
            get => _Text2;
            set => Set(ref _Text2, value);
        }

        private string _Text3 = "А теперь перейдем к главной теме этого урока - конструкция if и else. " +
            "Она используется повсеместно и нужна для направления работы программы. " +
            "Условия здесь - это пропуск к той или иной части программы. " +
            "Сами части программы, которые необходимо выполнить, находятся в в фигурных скобках сразу после условия" +
            "(если условие одно, можно упростить программу и писать действие без фигурных скобок).\n";

        public string Text3
        {
            get => _Text3;
            set => Set(ref _Text3, value);
        }

        private string _Text4 = "Но если при несоблюдении условия нам тоже нужны действия, то используем else.\n";

        public string Text4
        {
            get => _Text4;
            set => Set(ref _Text4, value);
        }

        private string _Text5 = "Также если нам нужно дополнительное условие после не выполнения первого условия, можем воспользоваться else if.\n";

        public string Text5
        {
            get => _Text5;
            set => Set(ref _Text5, value);
        }

        private string _Text6 = "Конструкция switch case нужна для ветвления с большим количеством условий, " +
            "такое используется при создании меню пользователя. " +
            "Мы задаем выражение или переменную, и она сравнивается с различными значениями и в зависимости от этих значений выполняются разные части кода.\r\n\n";

        public string Text6
        {
            get => _Text6;
            set => Set(ref _Text6, value);
        }

        private string _Text7 = "В данном случае конструкция switch последовательно сравнивает значение переменной name с набором значений, " +
            "которые указаны после операторов case. Поскольку здесь значение переменной name - строка Мявка, " +
            "то будет выполняться первый блок. Каждый case необходимо заканчивать словом break. " +
            "Также можно учесть случай, при котором никакое значение case не подходит. Тогда можно добавить case под названием default.";

        public string Text7
        {
            get => _Text7;
            set => Set(ref _Text7, value);
        }

        private string _Text8 = "Какие логические операции нужны для перевода этого предложения в выражение:\n Мурзик или Муся не сидели на трубе.";

        public string Text8
        {
            get => _Text8;
            set => Set(ref _Text8, value);
        }

        private string _Text9 = "Нам необходимо подобрать подушки семи кошкам: " +
           "\n-Марусе - нужна яркая и твердая подушка" +
           "\n-Рыжику - нужна мягкая, но не зеленая подушка" +
           "\n-Алисе - нужна подушка с натуральными наполнителями" +
           "\n-Мусе - нужна круглая или овальная подушка" +
           "\n-Соне - нужна декоративная подушка" +
           "\n-Васе - нужна дакимакура любая, но без изображения жирафов" +
           "\n-Кузе - нужна ортопедическая соломенная подушка\n" +
           "\nПрограмма должна спрашивать пользователя, для какой именно кошки нужно подобрать подушку, и потом задавать вопросы, чтобы определить, подходит эта подушка или нет";

        public string Text9
        {
            get => _Text9;
            set => Set(ref _Text9, value);
        }
    }
}
